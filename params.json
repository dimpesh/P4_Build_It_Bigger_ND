{
  "name": "BUILD IT BIGGER",
  "tagline": "Project 4 : BUILD IT BIGGER(a part of android developer nanodegree UDACITY)",
  "body": "# Gradle for Android and Java Final Project\r\n\r\nIn this project, you will create an app with multiple flavors that uses\r\nmultiple libraries and Google Could Endpoints. The finished app will consist\r\nof four modules. A Java library that provides jokes, a Google Could Endpoints\r\n(GCE) project that serves those jokes, an Android Library containing an\r\nactivity for displaying jokes, and an Android app that fetches jokes from the\r\nGCE module and passes them to the Android Library for display.\r\n\r\n## Why this Project\r\n\r\nAs Android projects grow in complexity, it becomes necessary to customize the\r\nbehavior of the Gradle build tool, allowing automation of repetitive tasks.\r\nParticularly, factoring functionality into libraries and creating product\r\nflavors allow for much bigger projects with minimal added complexity.\r\n\r\n##What Will I Learn?\r\n\r\nYou will learn the role of Gradle in building Android Apps and how to use Gradle to manage apps of increasing complexity. You'll learn to:\r\n\r\n* Add free and paid flavors to an app, and set up your build to share code between them\r\n* Factor reusable functionality into a Java library\r\n* Factor reusable Android functionality into an Android library\r\n* Configure a multi project build to compile your libraries and app\r\n* Use the Gradle App Engine plugin to deploy a backend\r\n* Configure an integration test suite that runs against the local App Engine development server\r\n\r\n##How Do I Complete this Project?\r\n\r\n### Step 0: Starting Point\r\n\r\nThis is the starting point for the final project, which is provided to you in the [course repository](https://github.com/udacity/ud867/tree/master/FinalProject).\r\nIt contains an activity with a banner ad and a button that purports to tell a\r\njoke, but actually just complains. The banner ad was set up following the\r\ninstructions here:\r\n\r\nhttps://developers.google.com/mobile-ads-sdk/docs/admob/android/quick-start\r\n\r\nYou may need to download the Google Repository from the Extras section of the\r\nAndroid SDK Manager.\r\n\r\nWhen you can build an deploy this starter code to an emulator, you're ready to\r\nmove on.\r\n\r\n### Step 1: Create a Java library\r\n\r\nYour first task is to create a Java library that provides jokes. Create a new\r\nGradle Java project either using the Android Studio wizard, or by hand. Then\r\nintroduce a project dependency between your app and the new Java Library. If\r\nyou need review, check out demo 4.01 from the course code.\r\n\r\nMake the button display a toast showing a joke retrieved from your Java joke\r\ntelling library.\r\n\r\n### Step 2: Create an Android Library\r\n\r\nCreate an Android Library containing an Activity that will display a joke\r\npassed to it as an intent extra. Wire up project dependencies so that the\r\nbutton can now pass the joke from the Java Library to the Android Library.\r\n\r\nFor review on how to create an Android library, check out demo 4.03. For a\r\nrefresher on intent extras, check out;\r\n\r\nhttp://developer.android.com/guide/components/intents-filters.html\r\n\r\n### Step 3: Create GCE Module\r\n\r\nThis next task will be pretty tricky. Instead of pulling jokes directly from\r\nour Java library, we'll set up a Google Cloud Endpoints development server,\r\nand pull our jokes from there. Follow the instructions in the following\r\ntutorial to add a Google Could Endpoints module to your project:\r\n\r\nhttps://github.com/GoogleCloudPlatform/gradle-appengine-templates/tree/master/HelloEndpoints\r\n\r\nIntroduce a project dependency between your Java library and your GCE module,\r\nand modify the GCE starter code to pull jokes from your Java library. Create\r\nan Async task to retrieve jokes. Make the button kick off a task to retrieve a\r\njoke, then launch the activity from your Android Library to display it.\r\n\r\n### Step 4: Add Functional Tests\r\n\r\nAdd code to test that your Async task successfully retrieves a non-empty\r\nstring. For a refresher on setting up Android tests, check out demo 4.09.\r\n\r\n### Step 5: Add a Paid Flavor\r\n\r\nAdd free and paid product flavors to your app. Remove the ad (and any\r\ndependencies you can) from the paid flavor.\r\n\r\n## Optional Tasks\r\n\r\nFor extra practice to make your project stand out, complete the following tasks.\r\n\r\n### Add Interstitial Ad\r\n\r\nFollow these instructions to add an interstitial ad to the free version.\r\nDisplay the add after the user hits the button, but before the joke is shown.\r\n\r\nhttps://developers.google.com/mobile-ads-sdk/docs/admob/android/interstitial\r\n\r\n### Add Loading Indicator\r\n\r\nAdd a loading indicator that is shown while the joke is being retrieved and\r\ndisappears when the joke is ready. The following tutorial is a good place to\r\nstart:\r\n\r\nhttp://www.tutorialspoint.com/android/android_loading_spinner.htm\r\n\r\n### Configure Test Task\r\n\r\nTo tie it all together, create a Gradle task that:\r\n\r\n1. Launches the GCE local development server\r\n2. Runs all tests\r\n3. Shuts the server down again\r\n\r\n# Rubric\r\n\r\n### Required Components\r\n\r\n* Project contains a Java library for supplying jokes\r\n* Project contains an Android library with an activity that displays jokes passed to it as intent extras.\r\n* Project contains a Google Cloud Endpoints module that supplies jokes from the Java library. Project loads jokes from GCE module via an async task.\r\n* Project contains connected tests to verify that the async task is indeed loading jokes.\r\n* Project contains paid/free flavors. The paid flavor has no ads, and no unnecessary dependencies.\r\n\r\n### Required Behavior\r\n\r\n* App retrieves jokes from Google Cloud Endpoints module and displays them via an Activity from the Android Library.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}